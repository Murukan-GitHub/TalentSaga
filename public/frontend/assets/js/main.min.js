'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/*! [PROJECT_NAME] | Suitmedia */

(function (window, document, undefined) {

    var app = angular.module('talentSaga', []);

    app.directive('onFinishRender', ['$timeout', function ($timeout) {
        return {
            restrict: 'A',
            link: function link(scope, element, attr) {
                if (scope.$last) {
                    $timeout(function () {
                        scope.$emit(attr.onFinishRender);
                    });
                }
            }
        };
    }]);

    var IS_ACTIVE = 'is-active';

    var path = {
        css: myPrefix + 'assets/css/',
        js: myPrefix + 'assets/js/vendor/'
    };

    var assets = {
        _slick: path.js + 'slick.min.js',
        _handlebars: path.js + 'handlebars.min.js',
        _headroom: path.js + 'headroom.min.js',
        _objectFit: path.js + 'object-fit.min.js',
        _fitText: path.js + 'fitter-happier-text.min.js',
        _validate: path.js + 'baze.validate.min.js',
        _sprintf: path.js + 'sprintf.min.js',
        _datepicker: path.js + 'datepicker.min.js',
        _selectize: path.js + 'selectize.min.js',
        _rangeSlider: path.js + 'rangeslider.min.js',
        _numeral: path.js + 'numeral.min.js',
        _scrollbar: path.js + 'perfect-scrollbar.min.js',
        _tsAlert: myPrefix + 'assets/js/ts-alert.min.js',
        _gmaps: 'https://maps.googleapis.com/maps/api/js?key=AIzaSyBs1a7-LDLm06tVeneBPvKhY_FBTR51dpE',
        _debounce: path.js + 'jquery.ba-throttle-debounce.min.js'
    };

    var Site = {
        enableActiveStateMobile: function enableActiveStateMobile() {
            if (document.addEventListener) {
                document.addEventListener('touchstart', function () {}, true);
            }
        },
        WPViewportFix: function WPViewportFix() {
            if (navigator.userAgent.match(/IEMobile\/10\.0/)) {
                var style = document.createElement('style'),
                    fix = document.createTextNode('@-ms-viewport{width:auto!important}');

                style.appendChild(fix);
                document.getElementsByTagName('head')[0].appendChild(style);
            }
        },
        objectFitPolyfill: function objectFitPolyfill() {
            load(assets._objectFit).then(function () {
                objectFitImages();
            });
        },
        siteHeader: function siteHeader() {
            Promise.all([exist('.site-header--home'), load(assets._headroom)]).then(function (res) {
                var _res = _slicedToArray(res, 1),
                    $header = _res[0];

                var headroom = new Headroom($header[0]);
                headroom.init();
            }).catch(noop);
        },
        heroHeading: function heroHeading() {
            Promise.all([exist('.hero-heading'), load(assets._fitText)]).then(function (res) {
                var _res2 = _slicedToArray(res, 1),
                    $heading = _res2[0];

                fitterHappierText($heading.children('.hero-heading-fit-text').toArray(), {
                    paddingY: -1
                });
            }).catch(noop);
        },
        enhanceSelect: function enhanceSelect() {
            Promise.all([exist('[data-enhance-select]'), load(assets._selectize)]).then(function (res) {
                var _res3 = _slicedToArray(res, 1),
                    $input = _res3[0];

                $input.selectize();
            }).catch(noop);
        },
        popup: function popup() {
            exist('.popup').then(function ($popup) {
                $popup.on('click', function (e) {
                    var $target = $(e.currentTarget);

                    if (!underMedium() && window.innerWidth - $target.offset().left < 300) {
                        $target.addClass('popup--right');
                    }

                    e.stopPropagation();
                });

                $popup.on('click', '.popup-btn', function (e) {
                    e.preventDefault();
                    var $parent = $(e.currentTarget).parent();

                    if ($parent.hasClass(IS_ACTIVE)) {
                        $parent.removeClass(IS_ACTIVE);
                    } else {
                        $popup.removeClass(IS_ACTIVE);
                        $(e.currentTarget).parent().toggleClass(IS_ACTIVE);
                    }
                });

                $(document.body).on('click', function (e) {
                    $('.popup').removeClass(IS_ACTIVE);
                });
            }).catch(noop);
        },
        toggleSearch: function toggleSearch() {
            var $search = $('.site-header-search');

            $('.site-header-search-toggle').on('click', function (e) {
                $search.toggleClass(IS_ACTIVE);
            });
        },
        findTalentInfoSlider: function findTalentInfoSlider() {
            exist('.find-talent-info-slider').then(function ($slider) {
                $slider.slick({
                    arrows: false,
                    accessibility: false,
                    dots: true,
                    mobileFirst: true,
                    draggable: false,
                    autoplay: true,
                    autoplaySpeed: 3000,
                    responsive: [{
                        breakpoint: 767,
                        settings: {
                            centerMode: true,
                            variableWidth: true
                        }
                    }]
                });
            }).catch(noop);
        },
        successStory: function successStory() {
            Promise.all([exist('.success-story-slider'), load(assets._handlebars)]).then(getDataUrl).then(loadJSON).then(preloadImages).then(initSlider).then(handleSliderNav).catch(noop);

            function getDataUrl(res) {
                return new Promise(function (resolve, reject) {
                    var uri = res[0].data('content');

                    if (uri) {
                        resolve(uri);
                    } else {
                        reject(uri);
                    }
                });
            }

            function preloadImages(stories) {
                return new Promise(function (resolve, reject) {
                    stories.success_stories.forEach(function (story) {
                        preload(story.imageThumb);
                        preload(story.imageBackground);
                    });

                    resolve(stories);
                });
            }

            function initSlider(stories) {
                return new Promise(function (resolve, reject) {
                    var $elem = $('.success-story-slider');
                    var templateSlider = $('#templateSuccessStorySlider').html();
                    templateSlider = Handlebars.compile(templateSlider);

                    $elem.append(templateSlider(stories));

                    createSlider($elem, {
                        arrows: false,
                        infinite: false
                    });

                    resolve([stories, $elem]);
                });
            }

            function handleSliderNav(res) {
                return new Promise(function (resolve, reject) {
                    var _res4 = _slicedToArray(res, 2),
                        stories = _res4[0],
                        $elem = _res4[1];

                    var $navPrev = $('.success-story-nav--prev');
                    var $navNext = $('.success-story-nav--next');
                    var templatePeek = $('#successStoryPeek').html();
                    templatePeek = Handlebars.compile(templatePeek);

                    $navPrev.addClass(IS_ACTIVE);
                    $navNext.addClass(IS_ACTIVE);

                    $navPrev.on('mouseover', '.success-story-peek', preventBubbling);
                    $navNext.on('mouseover', '.success-story-peek', preventBubbling);

                    $navPrev.on('mouseover', getSneakPeak('prev'));
                    $navNext.on('mouseover', getSneakPeak('next'));

                    $navPrev.on('click', changeSlide('prev'));
                    $navNext.on('click', changeSlide('next'));

                    function getSneakPeak(action) {
                        return function (e) {
                            if (underMedium()) return;

                            var $this = $(e.currentTarget);
                            var currentIndex = $elem.slick('slickCurrentSlide');
                            var peakIndex = void 0;

                            if (action === 'prev') {
                                peakIndex = currentIndex - 1;

                                $this.empty();

                                if (peakIndex < 0) return;
                            } else if (action === 'next') {
                                peakIndex = currentIndex + 1;

                                $this.empty();

                                if (peakIndex === stories.success_stories.length) return;
                            }

                            $(e.currentTarget).append(templatePeek(stories.success_stories[peakIndex]));
                        };
                    }

                    function changeSlide(action) {
                        return function (e) {
                            if (action === 'prev') {
                                $elem.slick('slickPrev');
                            } else if (action === 'next') {
                                $elem.slick('slickNext');
                            }

                            $(e.currentTarget).trigger('mouseover');
                        };
                    }
                });
            }

            function preventBubbling(e) {
                e.stopPropagation();
            }
        },
        formValidation: function formValidation() {
            Promise.all([exist('[data-validate]'), load(assets._sprintf), load(assets._validate)]).then(function (res) {
                var _res5 = _slicedToArray(res, 1),
                    $form = _res5[0];

                $form.bazeValidate();
            }).catch(noop);
        },
        datepicker: function datepicker() {
            Promise.all([exist('[data-datepicker]')]).then(function (res) {
                var _res6 = _slicedToArray(res, 1),
                    $inputs = _res6[0];

                $inputs.each(function (i, input) {
                    var $input = $(input);
                    var minDate = $input.data('min-date');
                    var opts = {
                        autoHide: true
                    };

                    if (minDate === 'TODAY') {
                        opts.startDate = new Date();
                    }

                    handleChange($input);

                    $input.datepicker(opts);
                });
            }).catch(noop);

            function handleChange($input) {
                if ($input.data('start-date-for')) {
                    (function () {
                        var $endDateInput = $('' + $input.data('start-date-for'));

                        $input.on('pick.datepicker', function (e) {
                            var startDate = $input.datepicker('getDate');
                            var endDate = $endDateInput.datepicker('getDate');

                            $endDateInput.datepicker('setStartDate', startDate);

                            if (startDate.getTime() > endDate.getTime()) {
                                $endDateInput.datepicker('setDate', startDate);
                            }
                        });
                    })();
                }
            }
        },
        timepicker: function timepicker() {
            exist('[data-timepicker]').then(function ($inputs) {
                $inputs.timepicker({
                    disableTextInput: true,
                    disableTouchKeyboard: true,
                    show2400: true,
                    timeFormat: 'H:i'
                });
            }).catch(noop);
        },
        portofolioForm: function portofolioForm() {
            app.controller('PortofolioFormController', ['$scope', function ($scope) {
                $scope.portofolios = [{
                    id: 1,
                    date: '',
                    name: '',
                    experience: '',
                    url: ''
                }];

                $scope.addPortofolio = function () {
                    $scope.portofolios.push({
                        id: getUID(),
                        date: '',
                        name: '',
                        experience: '',
                        url: ''
                    });
                };

                $scope.removePortofolio = function (portofolioId) {
                    $scope.portofolios.forEach(function (portofolio, index, array) {
                        if (portofolio.id === portofolioId) {
                            array.splice(index, 1);
                        }
                    });
                };

                $scope.$on('ngRepeatFinished', function () {
                    Site.datepicker();
                });
            }]);

            function getUID() {
                return new Date().getTime();
            }
        },
        uploadPhotosForm: function uploadPhotosForm() {
            app.controller('UploadPhotosController', ['$scope', function ($scope) {
                $scope.showUploader = false;
                $scope.photosToUpload = [{}, {}];
                $scope.videoUrls = [{}];

                $scope.addInputFile = function () {
                    $scope.photosToUpload.push({});
                };

                $scope.addNewURLVideo = function () {
                    $scope.videoUrls.push({});
                };

                $scope.$on('attachInputListener', function () {
                    $scope.showUploader = true;

                    // $('.upload-photo')
                    //     .off('drag dragstart dragend dragover dragenter dragleave drop', preventDefaultEvent)
                    //     .off('dragover dragenter', addDragEnterClass)
                    //     .off('dragleave dragend drop', removeDragEnterClass)
                    //     .on('drag dragstart dragend dragover dragenter dragleave drop', preventDefaultEvent)
                    //     .on('dragover dragenter', addDragEnterClass)
                    //     .on('dragleave dragend drop', removeDragEnterClass)

                    $('.upload-photo-input').off('change', handleEvent).on('change', handleEvent);
                });

                function preventDefaultEvent(e) {
                    e.preventDefault();
                    e.stopPropagation();
                }

                function addDragEnterClass(e) {
                    $(e.currentTarget).addClass('is-dragover');
                }

                function removeDragEnterClass(e) {
                    $(e.currentTarget).removeClass('is-dragover');
                }

                function handleEvent(e) {
                    var $this = $(e.currentTarget);
                    var $label = $this.parent();
                    $label.attr('data-filename', $this[0].files[0].name);
                    $label.addClass(IS_ACTIVE);
                }
            }]);
        },
        selectizeInput: function selectizeInput() {
            Promise.all([exist('[data-selectize]'), load(assets._selectize)]).then(function (res) {
                var _res7 = _slicedToArray(res, 1),
                    $input = _res7[0];

                $input.removeClass('invisible');
                $input.selectize({
                    plugins: ['remove_button'],
                    persist: false
                });
            }).catch(noop);
        },
        cityAvailability: function cityAvailability() {
            exist('[data-city-availability]').then(function ($input) {
                $input.on('click', function (e) {
                    var $target = $(e.currentTarget).data('city-availability');
                    $target = $($target);
                    if (e.currentTarget.checked) {
                        $target.removeClass('city-availability-hidden');
                    } else {
                        $target.addClass('city-availability-hidden');
                    }
                });
            }).catch(noop);
        },
        priceRange: function priceRange() {
            Promise.all([exist('#inputPriceRange'), load(assets._numeral), load(assets._rangeSlider)]).then(function (res) {
                var _res8 = _slicedToArray(res, 1),
                    $input = _res8[0];

                numeral.language('id', {
                    delimiters: {
                        thousands: '.',
                        decimal: ','
                    }
                });

                numeral.language('id');

                $('input[type="range"]').rangeslider({
                    polyfill: false,
                    onInit: function onInit() {
                        this.$handle.attr('data-value', numeral(this.value).format('0,0'));
                    },
                    onSlide: function onSlide(position, value) {
                        this.$handle.attr('data-value', numeral(value).format('0,0'));
                    }
                });
            }).catch(noop);
        },
        categoryFilter: function categoryFilter() {
            exist('.category-filter').then(function ($filter) {
                $('.category-layout-filter-trigger').on('click', 'button', function (e) {
                    e.preventDefault();

                    $filter.toggleClass(IS_ACTIVE);
                });
            }).catch(noop);

            app.controller('CategoryFilterController', ['$scope', '$http', '$timeout', '$element', function ($scope, $http, $timeout, $element) {
                var countriesUrl = $('#selectCountry').data('countries');
                var $selectCountry = $('#selectCountry');
                var $selectCity = $('#selectCity');

                $scope.isGettingCities = true;

                getCountries(countriesUrl).then(function (cities) {
                    $scope.$apply(function () {
                        $scope.cities = cities;
                        $scope.filterCities = $scope.filterCountry.cities.filter(function (c) {
                            return c.selected === true;
                        }).reduce(function (c) {
                            return c;
                        });

                        $scope.isGettingCities = false;

                        $timeout(function () {
                            $selectCountry.selectize();
                            $selectCity.selectize();
                        }, 100);
                    });
                }).catch(noop);

                $scope.getCitiesByCountry = function () {
                    $scope.isGettingCities = true;

                    var cities = $scope.countries.filter(function (c) {
                        return c.value === $scope.filterCountry;
                    }).map(function (c) {
                        return c.cities;
                    }).reduce(function (cities) {
                        return cities;
                    });

                    $scope.cities = cities;
                    $scope.filterCities = $scope.cities[0];
                    $scope.isGettingCities = false;
                    $selectCity[0].selectize.destroy();

                    $timeout(function () {
                        $selectCity.selectize();
                        $selectCountry[0].selectize.setValue($scope.filterCountry);
                    }, 0);
                };

                function getCountries(url) {
                    return new Promise(function (resolve, reject) {
                        $http.get(url).then(function (res) {
                            $scope.countries = res.data;
                            $scope.filterCountry = res.data.filter(function (c) {
                                return c.selected === true;
                            }).reduce(function (c) {
                                return c;
                            });

                            resolve($scope.filterCountry.cities);
                        }, function (res) {
                            reject(res);
                        });
                    });
                }
            }]);
        },
        talentGallery: function talentGallery() {
            exist('.talent-profile-images').then(function ($gallery) {
                $gallery.find('a').fancybox({
                    slideShow: false,
                    fullScreen: false,
                    thumbs: false
                });
            }).catch(noop);
        },
        talentGalleryCustomScroll: function talentGalleryCustomScroll() {
            Promise.all([exist('.talent-profile-gallery'), load(assets._scrollbar), load(assets._debounce)]).then(function (res) {
                var _res9 = _slicedToArray(res, 1),
                    $el = _res9[0];

                if (isLarge()) {
                    Ps.initialize($el[0], {
                        maxScrollbarLength: 20
                    });
                }

                $(window).on('resize', $.debounce(300, function () {
                    if (isLarge()) {
                        Ps.initialize($el[0], {
                            maxScrollbarLength: 20
                        });
                    } else {
                        Ps.destroy($el[0]);
                    }
                }));
            }).catch(noop);
        },
        modal: function modal() {
            var DEFAULT_OVERFLOW = document.documentElement.style.overflow;
            var $modal = $('.modal');
            var $dialog = $modal.find('.modal-dialog');
            var $content = $modal.find('.modal-dialog-content');
            var $closeBtn = $modal.find('.modal-dialog-close');
            var $trigger = $('[data-modal]');

            $modal.on('click', closeModal);
            $closeBtn.on('click', closeModal);
            $(document).on('keyup', function (e) {
                if (e.keyCode === 27) {
                    closeModal();
                }
            });

            $dialog.on('click', function (e) {
                e.stopPropagation();
            });

            $trigger.on('click', function (e) {
                e.preventDefault();

                var content = $(e.currentTarget).data('modal');
                content = $(content).html();
                showModal(content);
            });

            function showModal(content) {
                setDocOverflow('hidden');

                $content.empty().append(content);

                $modal.addClass(IS_ACTIVE);

                Site.formValidation();
                Site.datepicker();
                Site.timepicker();
            }

            function closeModal() {
                setDocOverflow(DEFAULT_OVERFLOW);
                $modal.removeClass(IS_ACTIVE);
                $(document).trigger('click');
            }

            function setDocOverflow(value) {
                document.documentElement.style.overflow = value;
            }
        },
        contactMap: function contactMap() {
            Promise.all([exist('.contact-map'), load(assets._gmaps)]).then(function (res) {
                var _res10 = _slicedToArray(res, 1),
                    $container = _res10[0];

                var container = $container[0];
                var coords = $container.data('coords');

                var map = new google.maps.Map(container, {
                    center: coords,
                    zoom: 14,
                    scrollwheel: false,
                    clickableIcons: false
                });

                var marker = new google.maps.Marker({
                    position: coords,
                    map: map
                });
            }).catch(function (e) {});
        },
        editAvatarField: function editAvatarField() {
            exist('.edit-avatar-field').then(function ($container) {
                var $input = $container.find('#inputAvatar');
                var $img = $container.find('img');
                var $cropField = $('.avatar-crop-field');
                var DIMENSION = 200;

                $input.on('change', function (e) {
                    var files = e.currentTarget.files;


                    if (files && files[0]) {
                        var reader = new FileReader();

                        reader.onload = function (e) {
                            showModal();
                            initCroppie($img, e.target.result);
                        };

                        reader.readAsDataURL(files[0]);
                    }
                });

                $('.avatar-crop-modal-close').on('click', function (e) {
                    hideModalAndDestroyCroppie($cropField);
                });

                function showModal() {
                    $('.avatar-crop-modal').addClass(IS_ACTIVE);
                }

                function hideModalAndDestroyCroppie($croppieInstance) {
                    $croppieInstance.croppie('destroy');
                    $('.avatar-crop-modal').removeClass(IS_ACTIVE);
                    $input.val(null);
                }

                function initCroppie($preview, base64Img) {
                    $cropField.croppie({
                        url: base64Img,
                        boundary: {
                            width: DIMENSION,
                            height: DIMENSION
                        },
                        viewport: {
                            width: DIMENSION,
                            height: DIMENSION,
                            type: 'square'
                        },
                        mouseWheelZoom: false
                    });

                    $('.avatar-crop-modal-set-btn').off('click.setAvatar').on('click.setAvatar', function (e) {
                        $cropField.croppie('result', {
                            type: 'base64',
                            size: {
                                width: DIMENSION,
                                height: DIMENSION
                            },
                            quality: 1
                        }).then(function (res) {
                            document.querySelector('#croppedInputAvatar').value = res;
                            $preview.attr('src', res);
                            hideModalAndDestroyCroppie($cropField);
                        });
                    });
                }
            }).catch(noop);
        },
        imageCrop: function imageCrop() {
            exist('.js-image-crop').then(function ($container) {
                var $input = $container.find('.js-image-crop-input');
                var $img = $container.find('.js-image-crop-preview');
                var $hiddenInput = $container.find('.js-image-crop-hidden-input');
                var $cropField = $('.image-crop-field');

                $input.on('change', function (e) {
                    var files = e.currentTarget.files;

                    var dummyImg = document.createElement('img');

                    if (files && files[0]) {
                        var reader = new FileReader();

                        dummyImg.onload = function (e) {
                            initCroppie($img, e.target.src, {
                                width: e.target.width,
                                height: e.target.height
                            });
                        };

                        reader.onload = function (e) {
                            showModal();
                            dummyImg.src = e.target.result;
                        };

                        reader.readAsDataURL(files[0]);
                    }
                });

                $('.image-crop-modal-close').on('click', function (e) {
                    hideModalAndDestroyCroppie($cropField);
                });

                function showModal() {
                    $('.image-crop-modal').addClass(IS_ACTIVE);
                }

                function hideModalAndDestroyCroppie($croppieInstance) {
                    $croppieInstance.croppie('destroy');
                    $('.image-crop-modal').removeClass(IS_ACTIVE);
                    $input.val(null);
                }

                function initCroppie($preview, base64Img, dimension) {
                    var size = getMinimumImageSize(dimension.width, dimension.height);
                    $cropField.croppie({
                        url: base64Img,
                        boundary: {
                            width: size.width,
                            height: size.height
                        },
                        viewport: {
                            width: Math.floor(size.width / 1.1),
                            height: Math.floor(size.height / 1.1)
                        },
                        mouseWheelZoom: false
                    });

                    $('.image-crop-modal-set-btn').off('click.setAvatar').on('click.setAvatar', function (e) {
                        $cropField.croppie('result', {
                            type: 'base64',
                            size: {
                                width: dimension.width,
                                height: dimension.height
                            },
                            quality: 1
                        }).then(function (res) {
                            $hiddenInput.val(res);
                            $preview.attr('src', res);
                            hideModalAndDestroyCroppie($cropField);
                        });
                    });
                }

                function getImageRatio(width, height) {
                    if (width > height) return Number(parseFloat(width / height).toFixed(2));
                    return Number(parseFloat(height / width).toFixed(2));
                }

                function getMinimumImageSize(width, height) {
                    var minimumSize = 400;
                    var ratio = getImageRatio(width, height);

                    if (width > height) {
                        return {
                            width: minimumSize,
                            height: Math.floor(minimumSize / ratio)
                        };
                    }

                    return {
                        height: minimumSize,
                        width: Math.floor(minimumSize / ratio)
                    };
                }
            }).catch(noop);
        },
        formAccInfo: function formAccInfo() {
            Promise.all([exist('.js-form-acc-information'), load(assets._sprintf), load(assets._validate)]).then(function (res) {
                var _res11 = _slicedToArray(res, 1),
                    $form = _res11[0];

                $form.bazeValidate({
                    onValidated: function onValidated(e) {
                        var pass = $('#inputPassword').val();
                        var confirmPass = $('#inputConfirmPassword').val();

                        if (pass !== confirmPass) {
                            tsAlert('Password and password confirmation do not match');
                            e.preventDefault();
                        }
                    }
                });
            }).catch(noop);
        },
        accordion: function accordion() {
            exist('.js-accordion').then(function ($accordion) {
                $accordion.on('click', '.js-accordion-title', function (e) {
                    var $this = $(e.currentTarget);
                    var $content = $this.next('.js-accordion-content');

                    if ($content.length) {
                        $this.toggleClass(IS_ACTIVE);
                        $content.slideToggle();
                    }
                });
            }).catch(noop);
        },
        tab: function tab() {
            exist('.js-tab').then(function ($tab) {
                $tab.on('click', '.js-tab-anchor', function (e) {
                    e.preventDefault();
                    var $this = $(e.currentTarget);

                    if ($this.hasClass(IS_ACTIVE)) return;

                    var $target = $this.attr('href') || $this.attr('data-target');
                    $target = $($target);

                    $this.siblings('.js-tab-anchor').removeClass(IS_ACTIVE);
                    $this.addClass(IS_ACTIVE);

                    $target.siblings('.js-tab-panel').removeClass(IS_ACTIVE);
                    $target.addClass(IS_ACTIVE);
                });
            }).catch(noop);
        },
        selectCountryCityController: function selectCountryCityController() {
            app.controller('SelectCountryCityController', ['$scope', '$http', '$element', '$timeout', function ($scope, $http, $element, $timeout) {
                load(assets._selectize).then(function () {
                    var countriesUrl = $element.data('countries');

                    $scope.isGettingCities = true;

                    getCountries(countriesUrl).then(function (cities) {
                        $scope.$apply(function () {
                            $scope.cities = cities;

                            var selectedCity = $scope.cities.filter(function (c) {
                                return c.selected === true;
                            });

                            $scope.filterCities = selectedCity[0].value || $scope.filterCountry.cities[0].value;

                            $scope.isGettingCities = false;

                            $timeout(function () {
                                $element.find('select').selectize();
                            }, 100);
                        });
                    }).catch(noop);

                    $scope.getCitiesByCountry = function () {
                        $scope.isGettingCities = true;

                        var cities = $scope.countries.filter(function (c) {
                            return c.value === $scope.filterCountry;
                        }).map(function (c) {
                            return c.cities;
                        }).reduce(function (cities) {
                            return cities;
                        });

                        $scope.cities = cities;

                        if ($scope.cities.length) {
                            $scope.filterCities = $scope.cities[0].value;
                        }

                        $scope.isGettingCities = false;

                        $('[ng-model="filterCities"]')[0].selectize.destroy();
                        $timeout(function () {
                            $('[ng-model="filterCities"]').selectize();
                        }, 0);
                    };

                    function getCountries(url) {
                        return new Promise(function (resolve, reject) {
                            $http.get(url).then(function (res) {
                                $scope.countries = res.data;

                                var selectedCountry = $scope.countries.filter(function (c) {
                                    return c.selected === true;
                                });
                                var countries = selectedCountry[0] || $scope.countries[0];

                                $scope.filterCountry = selectedCountry[0].value || $scope.countries[0].value;

                                resolve(countries.cities);
                            }, function (res) {
                                reject(res);
                            });
                        });
                    }
                });
            }]);
        },
        talentCategoryExpertiseController: function talentCategoryExpertiseController() {
            app.controller('TalentCategoryExpertiseController', ['$scope', '$http', '$element', function ($scope, $http, $element) {
                var categoriesUrl = $element.data('categories');
                var maxCount = Number(inputDescribe.getAttribute('data-max-char')) || 200;

                $scope.isLoading = true;

                $scope.charCount = inputDescribe.value.length || 0;

                $http.get(categoriesUrl).then(function (res) {
                    $scope.talentCategories = res.data;
                    var selectedCategory = $scope.talentCategories.filter(function (c) {
                        return c.selected === true;
                    });

                    $scope.talentCategory = selectedCategory[0] || $scope.talentCategories[0];
                    $scope.talentExpertises = getExpertiseByCategory($scope.talentCategory.value);
                    $scope.isLoading = false;
                    $element.css('opacity', 1);
                });

                $scope.getExpertise = function () {
                    $scope.talentExpertises = getExpertiseByCategory($scope.talentCategory);
                    $scope.talentCategory = $scope.talentCategories.filter(function (c) {
                        return c.value === $scope.talentCategory;
                    }).reduce(function (c) {
                        return c;
                    });
                };

                inputDescribe.addEventListener('keyup', function (e) {
                    if (inputDescribe.value.length > maxCount) {
                        inputDescribe.value = inputDescribe.value.substr(0, inputDescribe.value.length - 1);
                        return false;
                    }

                    $scope.$apply(function () {
                        $scope.charCount = inputDescribe.value.length;
                    });
                });

                function getExpertiseByCategory(value) {
                    return $scope.talentCategories.filter(function (c) {
                        return c.value === value;
                    }).map(function (c) {
                        return c.expertise;
                    }).reduce(function (expertise) {
                        return expertise;
                    });
                }
            }]);
        },
        priceEstimation: function priceEstimation() {
            exist('#priceEstimationContainer').then(function ($container) {
                var $contentBody = $container.find('#priceEstimationContent');
                var $addBtn = $container.find('.price-estimation-add-btn');
                var template = $container.find('template').html();

                $addBtn.on('click', function () {
                    $contentBody.append(template);
                });

                $container.on('click', '.price-estimation-remove-btn', function (e) {
                    $(e.currentTarget).parent().remove();
                });
            }).catch(noop);
        },
        drop: function drop() {
            var dropzone = document.querySelector('#uploadPhotosDropZone');

            if (!dropzone) return;

            var previewContainer = document.querySelector('#uploadPhotosDropZonePreview');
            var modal = document.querySelector('#uploadPhotosModal');
            var modalClose = modal.querySelector('.upload-photos-modal-dialog-close');
            var modalTrigger = document.querySelector('.js-upload-photos-modal-trigger');
            var inputFile = dropzone.querySelector('#uploadPhotosInput');
            var cta = document.querySelector('#uploadPhotosCta');
            var label = dropzone.querySelector('.upload-photos-dropzone-label');
            var IS_DRAGGING = 'is-dragging';

            modalTrigger.addEventListener('click', function (e) {
                modal.classList.toggle(IS_ACTIVE);
                disablePageScroll();
            });

            inputFile.addEventListener('change', function (e) {
                var files = [].concat(_toConsumableArray(e.currentTarget.files));
                processFiles(files);
            });

            dropzone.addEventListener('dragover', function (e) {
                e.stopPropagation();
                e.preventDefault();
                e.target.classList.add(IS_DRAGGING);
                e.dataTransfer.dropEffect = 'copy';
            });

            label.addEventListener('dragover', function (e) {
                dropzone.classList.add(IS_DRAGGING);
            });

            dropzone.addEventListener('dragleave', function (e) {
                e.target.classList.remove(IS_DRAGGING);
            });

            dropzone.addEventListener('drop', function (e) {
                e.stopPropagation();
                e.preventDefault();
                e.target.classList.remove(IS_DRAGGING);
                var files = [].concat(_toConsumableArray(e.dataTransfer.files));
                processFiles(files);
            });

            modalClose.addEventListener('click', closeModal);
            $(document).on('keyup.modalPhotos', function (e) {
                if (e.keyCode === 27) {
                    closeModal();
                }
            });

            $(document.body).on('click.modalDrop', '.upload-photos-dropzone-previews-item-remove', function (e) {
                $(e.currentTarget).parent().remove();

                if (!$('.upload-photos-dropzone-previews-item-remove').length) {
                    label.classList.remove('hidden');
                }
            });

            function processFiles(files) {
                files.map(function (file) {
                    var reader = new FileReader();
                    var wrapper = document.createElement('div');
                    var inputHiddenImage = document.createElement('input');
                    var inputHiddenFileName = document.createElement('input');
                    var preview = document.createElement('img');
                    var btnRemove = document.createElement('button');

                    wrapper.classList.add('upload-photos-dropzone-previews-item');
                    btnRemove.innerHTML = '<span class="fa fa-fw fa-trash"></span>';
                    btnRemove.classList.add('upload-photos-dropzone-previews-item-remove');
                    wrapper.appendChild(btnRemove);

                    reader.onload = function (evt) {
                        inputHiddenImage.type = 'hidden';
                        inputHiddenImage.value = evt.target.result;
                        inputHiddenImage.name = 'imagefiles[]';

                        inputHiddenFileName.type = 'hidden';
                        inputHiddenFileName.value = file.name;
                        inputHiddenFileName.name = 'imagefilenames[]';

                        preview.width = 150;
                        preview.draggable = false;
                        preview.style.margin = '5px';
                        preview.src = evt.target.result;
                        wrapper.appendChild(inputHiddenImage);
                        wrapper.appendChild(inputHiddenFileName);
                        wrapper.appendChild(preview);
                        previewContainer.appendChild(wrapper);

                        cta.classList.remove('hidden');
                        label.classList.add('hidden');
                    };

                    reader.readAsDataURL(file);
                });
            }

            function closeModal() {
                modal.classList.remove(IS_ACTIVE);

                [].concat(_toConsumableArray(previewContainer.children)).map(function (child) {
                    child.parentElement.removeChild(child);
                });

                label.classList.remove('hidden');
                cta.classList.add('hidden');
                inputFile.value = null;
                enablePageScroll();
            }
        },
        inputAutoPreview: function inputAutoPreview() {
            var inputs = document.querySelectorAll('[data-input-auto-preview]');

            if (!inputs.length) return;

            [].concat(_toConsumableArray(inputs)).forEach(function (input) {
                var preview = input.getAttribute('data-input-auto-preview');
                preview = document.querySelector(preview);

                input.addEventListener('change', function (e) {
                    var file = e.target.files[0];
                    var reader = new FileReader();
                    reader.onload = function (evt) {
                        preview.src = evt.target.result;
                    };
                    reader.readAsDataURL(file);
                });
            });
        },
        counter: function counter() {
            exist('.js-counter').then(function ($counter) {
                var $input = $counter.find('input');
                var $btnDec = $counter.find('.js-counter-dec');
                var $btnInc = $counter.find('.js-counter-inc');
                var min = Number($input.attr('min'));
                var max = Number($input.attr('max'));
                var value = currentValue();

                $btnDec.on('click', function (e) {
                    if (currentValue() === min) return;
                    $input.val(currentValue() - 1);
                });

                $btnInc.on('click', function (e) {
                    if (currentValue() === max) return;
                    $input.val(currentValue() + 1);
                });

                function currentValue() {
                    return Number($input.val());
                }
            }).catch(noop);
        }
    };

    Promise.all([load(assets._slick), load(assets._tsAlert), load(assets._datepicker)]).then(function () {
        for (var fn in Site) {
            Site[fn]();
        }
        window.Site = Site;

        angular.bootstrap(document, ['talentSaga']);
    });

    function exist(selector) {
        return new Promise(function (resolve, reject) {
            var $elem = $(selector);

            if ($elem.length) {
                resolve($elem);
            } else {
                reject('no element found for ' + selector);
            }
        });
    }

    function load(url) {
        return new Promise(function (resolve, reject) {
            Modernizr.load({
                load: url,
                complete: resolve
            });
        });
    }

    function loadJSON(url) {
        return new Promise(function (resolve, reject) {
            fetch(url).then(function (res) {
                if (res.ok) return res.json();

                reject('Network response not ok');
            }).then(function (data) {
                resolve(data);
            }).catch(noop);
        });
    }

    function underMedium() {
        return Modernizr.mq('screen and (max-width: 767px)');
    }

    function isLarge() {
        return Modernizr.mq('screen and (min-width: 64em)');
    }

    function createSlider($elem, opts) {
        var defaults = {
            accessibility: false,
            draggable: false
        };

        $elem.slick($.extend(true, opts, defaults));
    }

    function preload(src) {
        new Image().src = src;
    }

    function noop(e) {}

    function disablePageScroll() {
        document.documentElement.style.overflow = 'hidden';
    }

    function enablePageScroll() {
        document.documentElement.style.overflow = 'scroll';
    }
})(window, document);